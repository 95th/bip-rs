connection
writer
reader

validate receive
validate send

struct Block {
    pub active: bool,
    pub data: Vec<u8>
}

Peer
    delegation + state

PeerStream
    delegation + validation + connection

StateStream
    reading + writing
DataStream
    reading + writing

impl PeerStream {
    fn 
}

trait PeerReader

impl<T: Reader> PeerReader for T

trait PeerWriter

impl<T: Writer> PeerWriter for T

impl Streamable for PeerStream {
    fn mut_stream(&mut self) -> &mut Stream {
        self.conn_buf
    }
}

trait Streamable {
    fn mut_stream(&mut self) -> &mut Stream;
}

trait DataStream: Streamable;

impl<T: Streamable> DataStream for T {

}

trait StateStream: Streamable;

impl<T: Streamable> StateStream for T {

}